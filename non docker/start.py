#–ö–æ–ª-–≤–æ –Ω–æ–º–µ—Ä–æ–≤
#–°—Å—ã–ª–∫–∞
#–ü–æ–¥—Å—Å—ã–ª–∫–∞
#–î–ª–∏–Ω–Ω–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

import requests, time
import writer_module
import pytesseract
from selenium import webdriver
from bs4 import BeautifulSoup
import base64, re, os
from PIL import Image

class browser_emulator():
    def __init__(self, url, driver):
        self.url = url
        self.driver = driver
        self.emulator()

    def emulator(self):
        print("–†–∞–±–æ—Ç–∞–µ–º —Å URL "+self.url)
        driver = self.driver
        driver.get(self.url)
        try:
            button = driver.find_element_by_class_name("item-phone-button-sub-text")
            button.click()
            time.sleep(1)
            soup = BeautifulSoup(driver.page_source, "lxml")
        except:
            print("–õ–û–õ, –ö–ù–û–ü–ö–ò –° –ù–û–ú–ï–†–û–ú –¢–ï–õ–ï–§–û–ù–ê –ù–ï–¢ –ù–ê –°–¢–†–ê–ù–ò–¶–ï")

#TODO TRY CATCH 
        #–ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏
        for data in soup.find_all('div',{'class':'seller-info-name js-seller-info-name'}):
            username = data.getText()
        username = re.sub('[" "\n]', '', username)
        print(username)

#TODO TRY CATCH 
        #–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª—è (–∫–æ–º–ø–∞–Ω–∏—è/—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ/–∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –∏ —Ç.–¥.)
        for data in soup.find_all('div',{'class':'seller-info-col'}):
            buf_usertype = data.getText()
        buf_usertype_list = buf_usertype.split("\n")
        buf_usertype_list = list(filter(None, buf_usertype_list))
        usertype = buf_usertype_list[len(buf_usertype_list)-2]
        print(usertype)

        #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        true_img = ""
        self.number_result = False
        for img in soup.find_all("img"):
            if "data:image/png" in str(img):
                true_img = str(img)
        if true_img != "":
            self.img_data = true_img
            self.imgurl2text()
            if self.number_result != False:
                #TODO –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∫—É–¥–∞ —Ç–∞–º –Ω–∞–¥–æ
                print(self.number_result)
                writer_module.writer_class(self.number_result)

        else:
            print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò•")

    def imgurl2text(self):

        new_str = self.img_data[self.img_data.find("\"") + len("\""):self.img_data.rfind("\"")]
        head, data = new_str.split(',', 1)
        file_ext = head.split(';')[0].split('/')[1]
        plain_data = base64.b64decode(data)
        file_name = "image." + file_ext
        with open(file_name, 'wb') as f:
            f.write(plain_data)
        im = Image.open(file_name)
        im = im.convert("RGB")
        im.save("image.jpg")
        phone_number = pytesseract.image_to_string("image.jpg")
        phone_number = re.sub('[\-" "]', '', phone_number)
        if len(phone_number) == 11:
            self.number_result = phone_number
        else:
            print("–û–π–π, –Ω–æ–º–µ—Ä –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π")
        os.remove(file_name)
        os.remove("image.jpg")

class parse_links_class():
    def __init__(self):
        self.base_url = "https://www.avito.ru"
        self.avito_parse()

    def avito_parse(self):
        page_counter = 1
        driver = webdriver.Chrome()

        while page_counter != 5:
            dynamic_url = "/moskva/lichnye_veschi?s_trg=10&p=" + str(page_counter)
            driver.get(self.base_url + dynamic_url)
            soup = BeautifulSoup(driver.page_source, "lxml")
            for link in soup.findAll('a', attrs={'href': re.compile("^/moskva/")}):
                if "js-item-slider item-slider" in str(link):
                    link_str = str(link)
                    new_link = link_str[link_str.find("<a class=\"js-item-slider item-slider\" href=\"") + len("<a class=\"js-item-slider item-slider\" href=\""):link_str.rfind("\"> <ul class=\"item-slider-list js-item-slider-list\">")]
                    browser_emulator(self.base_url + new_link, driver)

            page_counter += 1

parse_links_class()